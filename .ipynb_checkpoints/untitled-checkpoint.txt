new_dataset = new_dataset.astype({'price': 'float64', 'odometer': 'int64'})
new_dataset.head(10)
new_dataset.dtypes


plt.figure(figsize=[11,5])
sns.histplot(new_dataset['odometer'],kde=True, stat="density")
plt.title('Car Price Distribution Plot')



plt.figure(figsize=[17,5])
plt.subplot(1,3,1)
sns.distplot(new_dataset['year'])
plt.title('Car Year Distribution Plot')

plt.subplot(1,3,2)
sns.distplot(new_dataset['odometer'])
plt.title('Car Mileage Distribution Plot')

plt.subplot(1,3,3)
sns.distplot(new_dataset['fuel'])
plt.title('EngineV Distribution Plot')


for col in temp_data.columns:
    if temp_data[col].dtypes == 'object':
        encoder = LabelEncoder()
        temp_data[col] = encoder.fit_transform(temp_data[col])
        
# Correated Features with target variable
print('\n--Correated Features with target variable--\n')
print(abs(temp_data.corrwith(temp_data['log_price'])).sort_values(ascending=False)[1:])

from sklearn.preprocessing import LabelEncoder
temp_data = clean_data.copy()
for col in temp_data.columns:
    if temp_data[col].dtypes == 'object':
        encoder = LabelEncoder()
        temp_data[col] = encoder.fit_transform(temp_data[col])
        
# Correated Features with target variable
print('\n--Correated Features with target variable--\n')
print(abs(temp_data.corrwith(temp_data['log_price'])).sort_values(ascending=False)[1:])

6061 datos son ceros

t_data[t_data['price'] == 0 ].count()


	Predicted Price	Actual Price	Residual	Difference%
31708	27152.38	29600.00	2447.62	8.27
31709	5389.93	7500.00	2110.07	28.13
31710	4242.33	5450.00	1207.67	22.16
31711	30629.76	35590.00	4960.24	13.94
31712	19127.14	26990.00	7862.86	29.13


VIF
from statsmodels.stats.outliers_influence import variance_inflation_factor
variables = clean_data[['odometer','year']]
vif = pd.DataFrame()
vif["VIF"] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]
# Finally, I like to include names so it is easier to explore the result
vif["Features"] = variables.columns
vif

# we are plotting a count of each 'condition' of the cars available in the dataset.
sns.set(rc={"figure.figsize":(12, 8)})
sns.countplot(x='condition',data=new_dataset, orient='v')


#explicar aca como funciona

sns.distplot(new_dataset['price'])
plt.title('Price Distribution of Used Cars')


#explicar este plot tambien y agregar las conclusiones
plt.figure(figsize=[17,5])
plt.subplot(1,2,1)
sns.distplot(new_dataset['year'])
plt.title('Year Distribution of Used Cars')

plt.subplot(1,2,2)
sns.distplot(new_dataset['odometer'])
plt.title('Odemeter Distribution of Used Cars')

from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.metrics import mean_squared_error as MSE
rf = RandomForestRegressor(n_estimators=20, random_state=0)

# Training Model
rf.fit(x_train,y_train)

# Model Summary
y_pred_rf = rf.predict(x_test)

print('Mean Absolute Error:', round(metrics.mean_absolute_error(y_test, y_pred_rf),2))
print('Mean Squared Error:', round(metrics.mean_squared_error(y_test, y_pred_rf),2))
print('Root Mean Squared Error:', round(np.sqrt(metrics.mean_squared_error(y_test, y_pred_rf)),2))
print(rf.score(x_test,y_test)*100)